// âœ… Importation du reducer et des actions Redux Ã  tester
import authentificationReducer, {
  loginSuccess,
  logout,
} from "../reducers/authentification";

// âœ… DÃ©finition du bloc de test pour le reducer d'authentification
describe("Authentification Reducer", () => {
  // ğŸ“Œ Ã‰tat initial du reducer (correspond Ã  l'Ã©tat dÃ©fini dans le fichier `authentification.js`)
  const initialState = {
    user: null, // Aucun utilisateur connectÃ© par dÃ©faut
    token: null, // Aucun token JWT par dÃ©faut
    loading: false, // Pas de requÃªte en cours
    error: null, // Pas d'erreur
  };

  // âœ… Test de l'action `loginSuccess`
  test("Should set user and token on loginSuccess", () => {
    // ğŸ“Œ DonnÃ©es fictives simulant un utilisateur connectÃ©
    const fakeUser = { username: "testUser", role: "user" };
    const fakeToken = "fake-jwt-token";

    // ğŸ“Œ CrÃ©ation de l'action Redux en appelant `loginSuccess`
    const action = loginSuccess({ user: fakeUser, token: fakeToken });

    // ğŸ“Œ Application de l'action au reducer
    const newState = authentificationReducer(initialState, action);

    // ğŸ“Œ VÃ©rification que le state est mis Ã  jour correctement aprÃ¨s connexion
    expect(newState.user).toEqual(fakeUser); // L'utilisateur doit Ãªtre dÃ©fini
    expect(newState.token).toEqual(fakeToken); // Le token doit Ãªtre enregistrÃ©
  });

  // âœ… Test de l'action `logout`
  test("Should clear user and token on logout", () => {
    // ğŸ“Œ Simulation d'un Ã©tat oÃ¹ l'utilisateur est connectÃ©
    const loggedInState = {
      user: { username: "testUser", role: "user" }, // Utilisateur connectÃ©
      token: "fake-jwt-token", // Token JWT actif
      loading: false,
      error: null,
    };

    // ğŸ“Œ ExÃ©cution de l'action `logout` pour simuler une dÃ©connexion
    const newState = authentificationReducer(loggedInState, logout());

    // ğŸ“Œ VÃ©rification que le state est bien rÃ©initialisÃ© aprÃ¨s dÃ©connexion
    expect(newState.user).toBeNull(); // L'utilisateur doit Ãªtre supprimÃ©
    expect(newState.token).toBeNull(); // Le token doit Ãªtre supprimÃ©
  });
});

