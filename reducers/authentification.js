import { createSlice } from "@reduxjs/toolkit"; //  Importation de `createSlice` depuis Redux Toolkit

// âœ… DÃ©finition de l'Ã©tat initial pour la gestion de l'authentification
const initialState = {
  user: null, // Stocke les informations de l'utilisateur connectÃ© (null signifie qu'aucun utilisateur n'est connectÃ©)
  token: null, // Stocke le token d'authentification (JWT par exemple)
  loading: false, // Indique si une requÃªte d'authentification est en cours
  error: null, // Stocke un Ã©ventuel message d'erreur en cas d'Ã©chec de connexion
};

// âœ… CrÃ©ation du slice Redux pour l'authentification
const authSlice = createSlice({
  name: "auth", // Nom du slice, utilisÃ© dans Redux
  initialState, // Utilisation de l'Ã©tat initial dÃ©fini ci-dessus
  reducers: {
    // âœ… Action pour dÃ©marrer le processus de connexion
    loginStart: (state) => {
      state.loading = true; // Active l'Ã©tat "loading" pour indiquer qu'une requÃªte est en cours
      state.error = null; // RÃ©initialise toute erreur prÃ©cÃ©dente
    },
    
    // âœ… Action pour une connexion rÃ©ussie
    loginSuccess: (state, action) => {
      state.user = action.payload.user; // Stocke les infos de l'utilisateur reÃ§u depuis l'API
      state.token = action.payload.token; // Stocke le token JWT
      state.loading = false; // DÃ©sactive l'Ã©tat "loading"
      state.error = null; // RÃ©initialise toute erreur Ã©ventuelle
    },

    // âœ… Action pour une connexion Ã©chouÃ©e
    loginFailure: (state, action) => {
      state.error = action.payload; // Stocke le message d'erreur reÃ§u (ex: "Email ou mot de passe incorrect")
      state.loading = false; // DÃ©sactive l'Ã©tat "loading"
    },

    // âœ… Action pour dÃ©connecter l'utilisateur
    logout: (state) => {
      state.user = null; // Supprime les infos de l'utilisateur
      state.token = null; // Supprime le token JWT
      state.error = null; // RÃ©initialise les erreurs
    },

    // âœ… Action pour mettre Ã  jour les infos de l'utilisateur (utile si on veut rafraÃ®chir les infos aprÃ¨s modification)
    setUser: (state, action) => {
      state.user = action.payload.user; // Met Ã  jour l'utilisateur
      state.token = action.payload.token; // Met Ã  jour le token
    },
  },
});

// âœ… Exportation des actions pour pouvoir les utiliser dans les composants
export const { loginStart, loginSuccess, loginFailure, logout, setUser } = authSlice.actions;

// âœ… Exportation du reducer pour l'utiliser dans `store.js`
export default authSlice.reducer; // ðŸ”¥ Ce reducer doit Ãªtre ajoutÃ© dans la configuration du store Redux
