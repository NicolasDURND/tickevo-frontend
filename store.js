// ğŸ“Œ Importation des outils de Redux Toolkit et Redux Persist
import { combineReducers, configureStore } from "@reduxjs/toolkit";
import { persistStore, persistReducer } from "redux-persist";
import storage from "redux-persist/lib/storage"; // ğŸ“Œ Utilisation du stockage local (localStorage)

// ğŸ“Œ Importation de ton reducer d'authentification
import auth from "./reducers/authentification";

//  CombineReducers : regroupe tous les reducers de l'application
const rootReducer = combineReducers({
  auth, // "auth" devient la clÃ© du state oÃ¹ les donnÃ©es d'authentification seront stockÃ©es
});

//  Configuration de redux-persist pour stocker les donnÃ©es du Redux Store dans le localStorage
const persistConfig = {
  key: "tickevo", // ğŸ“Œ ClÃ© utilisÃ©e pour stocker les donnÃ©es dans le localStorage
  storage, // ğŸ“Œ DÃ©finit le type de stockage (ici localStorage)
};

//  CrÃ©ation d'un reducer persistant qui applique redux-persist Ã  rootReducer
const persistedReducer = persistReducer(persistConfig, rootReducer);

//  Configuration du store Redux avec Redux Toolkit
export const store = configureStore({
  reducer: persistedReducer, // ğŸ“Œ Utilisation du reducer persistant
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({ serializableCheck: false }), // ğŸ“Œ DÃ©sactive la vÃ©rification de la sÃ©rialisation pour Ã©viter des erreurs avec redux-persist
});

//  CrÃ©ation d'un persistor qui va permettre de recharger les donnÃ©es sauvegardÃ©es au dÃ©marrage de l'application
export const persistor = persistStore(store); // ğŸ“Œ Ce persistor est utilisÃ© pour recharger les donnÃ©es stockÃ©es

export default store; // ğŸ“Œ Exportation du store pour l'utiliser dans l'application

